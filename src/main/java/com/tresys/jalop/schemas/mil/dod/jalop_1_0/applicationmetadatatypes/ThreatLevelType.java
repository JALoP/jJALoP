//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.03.06 at 10:05:13 AM EST 
//


package com.tresys.jalop.schemas.mil.dod.jalop_1_0.applicationmetadatatypes;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ThreatLevelType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ThreatLevelType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="malicious"/>
 *     &lt;enumeration value="unknown"/>
 *     &lt;enumeration value="safe"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ThreatLevelType")
@XmlEnum
public enum ThreatLevelType {


    /**
     * Applications should set the threat level to malicious when the associated journal data is known to contian viruses, macros, or anything else deemed dangerous.
     * 
     */
    @XmlEnumValue("malicious")
    MALICIOUS("malicious"),

    /**
     * Applications should set the threat level to "unknown" when the application didn't perform any sort of scan of the journal data. This is the default.
     * 
     */
    @XmlEnumValue("unknown")
    UNKNOWN("unknown"),

    /**
     * Designates that the entity that is submitting this piece of data for journaling scanned the document for viruses, macros, etc and deemed the file to be innocuous.  Note that it is still possible for the journal data to contain malicious code that was not detected.
     * 
     */
    @XmlEnumValue("safe")
    SAFE("safe");
    private final String value;

    ThreatLevelType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ThreatLevelType fromValue(String v) {
        for (ThreatLevelType c: ThreatLevelType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
